import React, { useState, useEffect } from "react";
import { Table, Container, Button, Badge, Image, Form } from "react-bootstrap";
import { useNavigate } from "react-router-dom";

const PartnerTour = () => {
  const [tours, setTours] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [sortOrder, setSortOrder] = useState("asc");
  const navigate = useNavigate();

  useEffect(() => {
    const fetchTours = async () => {
      try {
        const token = localStorage.getItem("token");
        if (!token) {
          alert("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!");
          return;
        }

        const response = await fetch(
          "http://localhost:9999/api/auth/tour/partner",
          {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${token}`,
            },
          }
        );

        const data = await response.json();
        if (response.ok) {
          setTours(data.data.tours);
        } else {
          alert("L·ªói l·∫•y danh s√°ch tour: " + data.message);
        }
      } catch (error) {
        console.error("L·ªói l·∫•y tour:", error);
      }
    };

    fetchTours();
  }, []);

  const filteredTours = tours
    .filter((tour) =>
      tour.name.toLowerCase().includes(searchTerm.toLowerCase())
    )
    .sort((a, b) =>
      sortOrder === "asc" ? a.price - b.price : b.price - a.price
    );
  const deleteTour = async (tourId) => {
    const confirmDelete = window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a tour n√†y?");
    if (!confirmDelete) return;

    try {
      const token = localStorage.getItem("token");
      const response = await fetch(
        `http://localhost:9999/api/auth/tour/${tourId}`,
        {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
        }
      );

      const data = await response.json();

      if (response.ok) {
        alert("X√≥a tour th√†nh c√¥ng!");
        setTours(tours.filter((tour) => tour._id !== tourId));
      } else {
        alert("L·ªói x√≥a tour: " + data.message);
      }
    } catch (error) {
      console.error("L·ªói x√≥a tour:", error);
    }
  };
  return (
    <Container className="mt-4">
      <h2 className="text-center">Danh S√°ch Tour C·ªßa B·∫°n</h2>
      <Button
        variant="secondary"
        className="mb-3"
        onClick={() => navigate("/partner/dashboard")}
      >
        Tr·ªü V·ªÅ Dashboard
      </Button>

      {/* üîç T√¨m ki·∫øm v√† s·∫Øp x·∫øp */}
      <div className="d-flex justify-content-between mb-3">
        <Form.Control
          type="text"
          placeholder="üîé T√¨m ki·∫øm theo t√™n..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
        <Button
          variant="outline-primary"
          onClick={() => setSortOrder(sortOrder === "asc" ? "desc" : "asc")}
        >
          {sortOrder === "asc" ? "‚¨ÜÔ∏è Gi√° tƒÉng d·∫ßn" : "‚¨áÔ∏è Gi√° gi·∫£m d·∫ßn"}
        </Button>
      </div>

      <Table striped bordered hover className="text-center align-middle">
        <thead className="table-dark">
          <tr>
            <th>#</th>
            <th>T√™n Tour</th>
            <th>Th·ªùi Gian</th>
            <th>K√≠ch th∆∞·ªõc nh√≥m</th>
            <th>Gi√° g·ªëc</th>
            <th>Gi√° gi·∫£m</th>
            <th>ƒê·ªãa ƒëi·ªÉm b·∫Øt ƒë·∫ßu</th>
            <th>·∫¢nh ƒë·∫°i di·ªán</th>
            <th>Tr·∫°ng Th√°i</th>
            <th>H√†nh ƒê·ªông</th>
          </tr>
        </thead>
        <tbody>
          {filteredTours.map((tour, index) => (
            <tr key={tour._id}>
              <td>{index + 1}</td>
              <td className="fw-bold">{tour.name}</td>
              <td>{tour.duration} ng√†y</td>
              <td>{tour.maxGroupSize} ng∆∞·ªùi</td>
              <td className="text-success">{tour.price} VND</td>
              <td className="text-danger">
                {tour.priceDiscount
                  ? `${tour.priceDiscount} VND`
                  : "Kh√¥ng gi·∫£m gi√°"}
              </td>
              <td>{tour.startLocation?.address || "Kh√¥ng c√≥ th√¥ng tin"}</td>
              <td>
                {tour.imageCover ? (
                  <Image
                    src={tour.imageCover}
                    alt="·∫¢nh Tour"
                    width="80"
                    height="50"
                    rounded
                  />
                ) : (
                  "Kh√¥ng c√≥ ·∫£nh"
                )}
              </td>
              <td>
                {tour.status === "active" ? (
                  <Badge bg="success">Ho·∫°t ƒë·ªông</Badge>
                ) : tour.status === "pending" ? (
                  <Badge bg="warning">Ch·ªù duy·ªát</Badge>
                ) : (
                  <Badge bg="secondary">Kh√¥ng ho·∫°t ƒë·ªông</Badge>
                )}
              </td>
              <td>
                <div className="d-flex gap-2 justify-content-center">
                  <Button
                    variant="warning"
                    size="sm"
                    onClick={() => navigate(`/partner/tours/edit/${tour._id}`)}
                  >
                    S·ª≠a
                  </Button>
                  <Button
                    variant="danger"
                    size="sm"
                    onClick={() => deleteTour(tour._id)}
                  >
                    X√≥a
                  </Button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </Table>
    </Container>
  );
};

export default PartnerTour;
